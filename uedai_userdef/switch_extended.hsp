#ifndef        IG_UEDAI_SWITCH_EXTENDED_HSP
#define global IG_UEDAI_SWITCH_EXTENDED_HSP

/*
%dll
uedai_userdef/switch_extended.hsp
%group
プログラム制御マクロ
%*/
/*
%index
case_if
比較式指定
%prm
cond
%inst
switch-swend ブロックのなかで、条件 cond が真であるときに実行される処理を指定する。
if 文と似ているが、この条件式は比較元の値 swthis を使うべきである。
%*/
/*
%index
swcontinue
比較ブロックをやり直す (更新あり)
%inst
switch 文の先頭に戻る。比較元の値は再評価される。
%*/
/*
%index
swredo
比較ブロックをやり直す (更新なし)
%inst
switch 文の先頭に戻る。比較元の値は最初に switch 文が実行されたときのまま戻るが、別の case 節に入る可能性もある。
%*/
/*
%index
go_case
case 節に移動する
%prm
val
%inst
現在の switch 文の、値 val に対応する case 節に移動する。
実際には、比較元の値を val に変更してから、swredo する。
%*/
/*
%index
go_default
default 節に移動する
%inst
現在の switch 文の default 節に移動する。
もし case 節がすべての値を網羅していたとしても、default 節に入る。
default 節がない場合は swend に移動する。デバッグモードなら実行時エラーになる。
%*/
/*
%index
swthis
switch 文の比較元の値
%inst
現在の switch 文の比較元の値を使用する。
case_if 文の
現在の switch 文の default 節に移動する。
もし case 節がすべての値を網羅していたとしても、default 節に入る。
default 節がない場合は swend に移動する。デバッグモードなら実行時エラーになる。
%*/

#undef switch
#undef case
#undef default
#undef swend
#undef swbreak

/**
* switch マクロ
*
* %p0: 比較元の値を保存する変数
* %p1: swend へのラベル (for swbreak)
* %p2: switch の先頭へのラベル (for swcontinue)
* %p3: switch の先頭へのラベル (for swredo)
*/
#define global switch(%1 = 1) %tswitch \
	%i0 %i0 %i0 %i0  swthis_bgn(%p)  swdefault_init \
	: *%p2 : %p = (%1) : *%p3 : if (0) {

#define global case(%1)     %tswitch %i0 goto *%p } if ( (%p1) == (%1) ) { *%o
#define global case_if(%1)  %tswitch %i0 goto *%p } if ( (%1) ) { *%o
#define global default      %tswitch } swdefault_place_default : if (1) {
#define global swend        %tswitch } swdefault_place_swend : %o0 *%o %o0 %o0 : swthis_end swdefault_term

#define global swbreak      %tswitch goto *%p1
#define global swcontinue   %tswitch goto *%p2
#define global swredo       %tswitch goto *%p3
#define global go_case(%1)  %tswitch %p = (%1) : swredo
#define global go_default   %tswitch goto swdefault_label

#define global xcase    swbreak : case
#define global xdefault swbreak : default

#define global swthis               %tswitch_this  %p
#define global ctype swthis_bgn(%1) %tswitch_this  %s1
#define global swthis_end           %tswitch_this  %o0

/*
実装メモ

default 用のラベルスタック (かなり複雑)
生成する2つのユニーク識別子を A, B とする。
最初、A, B, A の順にスタックに積まれる ({ %p: A, %p1: B, %p2: A })。
default があるとき:
	1. A が default に配置、除去される。B がスタック上に積まれる ({ %p: B, %p1: B, %p2: A })。
	2. 一番上の B が swend に配置される。残り2つはそのまま取り除かれる。
default がないとき: 
	1. 一番上の A が swend に配置される。残り2つはそのまま取り除かれる。
いずれにせよ A (swdefault_label) は default があるとき default を、ないときは swend (エラー部分) を指す。
//*/
#define global swdefault_init          %tswitch_default %i0 %i0 swdefault_push(%p1)		// [ A, B, A ] を積む
#define global swdefault_term          %tswitch_default %o0 %o0 %o0
#define global swdefault_place_default %tswitch_default *%o : swdefault_push(%p)		// A を配置して除去, B を doubling-push
#ifdef _DEBUG
 #define global swdefault_place_swend  %tswitch_default if (0) { *%p : logmes@hsp "go_default error: default doesn't exist.\n\t" + __HERE__ : assert@hsp }
#else
 #define global swdefault_place_swend  %tswitch_default : *%p :
#endif
#define global ctype swdefault_push(%1) %tswitch_default %s1

//default 節へのラベル、なければ swend へのラベル
#define global swdefault_label         %tswitch_default *%p2

#endif
